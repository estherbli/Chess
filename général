import pygame
import dictionnaire_pieces
import pieces


class general() :
    def __init__(self):

        self.largeur_echiquier=560 #multiple de 8, mis ici pour pouvoir le changer facilement à loisir
        
        self.echiquier=pygame.image.load(f'{pieces.path_milo}\\echiquier2.png') #on charge l'echiquier ici pour n'avoir à le faire qu'une seule fois (opération plutôt lourde)
        self.echiquier=pygame.transform.scale(self.echiquier, (self.largeur_echiquier,self.largeur_echiquier)) #on redimensionne l'image
        

        self.tour_des_blancs=True
        
        self.main_surface=pygame.display.set_mode((1240,self.largeur_echiquier)) # 900 -> largeur de la fenêtre
        pygame.display.set_caption('Chess') #titre de la fenêtre

#page de démarrage
        running1=True
        while running1:
            self.main_surface.fill((255, 203, 96))
            self.ecrire("Jouons !", (510,230), taille_ecriture=60)
            pygame.time.delay(1500)

            self.main_surface.fill((255, 203, 96))

            self.pseudo_blanc = self.input("Joueur blanc, quel est ton nom ?")
            self.ecrire(self.pseudo_blanc,(12,12))

            self.main_surface.fill((255, 203, 96))

            self.pseudo_noir = self.input("Joueur noir, quel est ton nom ?")
            self.ecrire(self.pseudo_noir, (12,12))

            running1=False

        self.setup_board()
        self.setup_pieces()
        self.__main__()
    
    def input(self, message):
        word=""
        self.ecrire(message,(24,12)) #example asking name
        pygame.display.flip()
        done = True
        while done:
            for event in pygame.event.get():
                if event.type==pygame.QUIT:
                    pygame.quit()
                if event.type == pygame.KEYDOWN:
                    if event.key ==pygame.K_RETURN:
                        done=False
                    else :
                        if len(word)<8:
                            word+=str(chr(event.key))
                            self.ecrire(word, (25,30))
        return word
    
    def setup_board(self):
        self.main_surface.fill((128, 208, 208))
        self.main_surface.blit(self.echiquier, (340,0))
        self.ecrire(f"BLANC : --- {self.pseudo_blanc} ---",(10,10), taille_ecriture=40)
        self.ecrire(f"NOIR : --- {self.pseudo_noir} ---",(self.largeur_echiquier+350,10), taille_ecriture=40)

        if self.tour_des_blancs:
            self.ecrire("C'est ton tour.", (10,60))
        else:
            self.ecrire("C'est ton tour.", (910,60))


    def setup_pieces(self):

        for i in range(8):
            for j in range(8):

                if (i,j) in dictionnaire_pieces.Echiquier :

                    piece=dictionnaire_pieces.Echiquier[(i,j)]
                    image_piece=piece.image

                    self.main_surface.blit(image_piece, (i*70+340,560-j*70-70)) # +340 pour mettre les pièces sur l'échiquier

        pygame.display.flip() #met à jour l'écran

    def ecrire(self, message, position, taille_ecriture=25, taille=(20,100), ecriture="Playfair display"):
        # pick a font you have and set its size
        myfont = pygame.font.SysFont(ecriture, taille_ecriture)
        # apply it to text on a label
        label = myfont.render(message, 1, (0,0,0))
        # put the label object on the screen at point x=570, y=2
        self.main_surface.blit(label, position)

        pygame.display.flip() #met à jour l'écran

    
    def __main__(self):
        clock = pygame.time.Clock()
        running2 = True
        case=()
        memoire=[]
        fin_de_partie=False


        while running2:
            #boutons abandonner
            couleur_bouton1 = (100,100,100) 
            couleur_bouton2 = (210,200,80)
            mouse = pygame.mouse.get_pos() 

            #boutons abandonner
            if 20 <= mouse[0] <= 120 and 450 <= mouse[1] <= 510 : 
                pygame.draw.rect(self.main_surface,couleur_bouton1,[20,450,100,60]) 
                self.ecrire("Abandonner", (32, 472), taille_ecriture=20)
                pygame.display.flip()
          
            else: 
                pygame.draw.rect(self.main_surface,couleur_bouton2,[20,450,100,60])
                self.ecrire("Abandonner",(32, 472), taille_ecriture=20)
                pygame.display.flip() 
            
            if self.largeur_echiquier+360 <= mouse[0] <= self.largeur_echiquier+460 and 450 <= mouse[1] <= 510 : 
                pygame.draw.rect(self.main_surface,couleur_bouton1,[self.largeur_echiquier+360,450,100,60]) 
                self.ecrire("Abandonner", (self.largeur_echiquier+371, 472), taille_ecriture=20)
          
            else: 
                pygame.draw.rect(self.main_surface,couleur_bouton2,[self.largeur_echiquier+360,450,100,60])
                self.ecrire("Abandonner", (self.largeur_echiquier+371, 472), taille_ecriture=20)

            #boutons la nulle
            if 140 <= mouse[0] <= 260 and 450 <= mouse[1] <= 510 : 
                pygame.draw.rect(self.main_surface,couleur_bouton1,[140,450,120,60]) 
                self.ecrire("Proposer la nulle", (152, 472), taille_ecriture=20)
                pygame.display.flip()
          
            else: 
                pygame.draw.rect(self.main_surface,couleur_bouton2,[140,450,120,60])
                self.ecrire("Proposer la nulle",(152, 472), taille_ecriture=20)
                pygame.display.flip() 
            
            if self.largeur_echiquier+480 <= mouse[0] <= self.largeur_echiquier+600 and 450 <= mouse[1] <= 510 : 
                pygame.draw.rect(self.main_surface,couleur_bouton1,[self.largeur_echiquier+480,450,120,60]) 
                self.ecrire("Proposer la nulle", (self.largeur_echiquier+490, 472), taille_ecriture=20)
          
            else: 
                pygame.draw.rect(self.main_surface,couleur_bouton2,[self.largeur_echiquier+480,450,120,60])
                self.ecrire("Proposer la nulle", (self.largeur_echiquier+490, 472), taille_ecriture=20)

            

            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    running2 = False
                    #Permet de garder la fenêtre ouverte jusqu'à ce que l'utilisateur veuille la fermer
                    #Par défaut l'evennement QUIT correspond à cliquer sur la croix
                
                if event.type == pygame.MOUSEBUTTONDOWN:
                    # Set the x, y postions of the mouse click 
                    x, y = mouse

#si on clique sur l'echiquier
                    if 340<=x<=self.largeur_echiquier+340 and y<=560: 
                        i=(x-340)//70 #correspnd à la colonne
                        j=(560-y)//70 #correspond à la ligne

                        if (i,j) == case:
                            case=()
                            memoire=[]

                        else :
                            case=(i,j)
                            memoire+=[case]

                        if len(memoire)==1:
                            if (i,j) in dictionnaire_pieces.Echiquier:
                                if self.tour_des_blancs:
                                    if dictionnaire_pieces.Echiquier[case].couleur=="blanc": #on vérifie que la pièce est bien de la couleur de la personne qui doit jouer
                                        self.ecrire("Où veux-tu aller?",(10,90) )
                                    else:
                                        case=()
                                        memoire=[]
                                else:
                                    if dictionnaire_pieces.Echiquier[case].couleur=="noir":
                                        self.ecrire("Où veux-tu aller?",(910,90) ) 
                                    else:
                                        case=()
                                        memoire=[]

                            else : #si le joueur a cliqué sur une case vide
                                case=()
                                memoire=[]

                        if len(memoire)==2:
                            position_depart=memoire[0][0],memoire[0][1]
                            position_arrivee=case[0],case[1]
                            piece_a_deplacer=dictionnaire_pieces.Echiquier[position_depart]

                            if position_depart in dictionnaire_pieces.Echiquier:
                                result=pieces.Piece.deplacement(piece_a_deplacer, position_arrivee)

                                if result=="Déplacement impossible": 
                                    if self.tour_des_blancs:
                                        self.ecrire("Déplacement impossible", (10,110))
                                        pygame.time.delay(1000)
                                    else :
                                        self.ecrire("Déplacement impossible", (910, 110))
                                        pygame.time.delay(1000)
                                
                                else :
                                    if self.tour_des_blancs:
                                        self.tour_des_blancs=False
                                    else :
                                        self.tour_des_blancs=True
                                    
                                    #promotion
                                    if piece_a_deplacer.nom[:-1]=="pion": # ici on regarde si un pion a atteint la dernière ligne de l'échiquier d'un côté ou de l'autre
                                        if piece_a_deplacer.couleur=="blanc" and piece_a_deplacer.y==7:
                                            
                                            couleur_bouton1 = (100,100,100) 
                                            couleur_bouton2 = (210,200,80)
                                            en_attente_de_decision=True
                                            while en_attente_de_decision:
                                                self.ecrire("Votre pion se transforme en?", (10, 130))

                                                mouse = pygame.mouse.get_pos()
    

                                                #différentes options de promotion
                                                if 10 <= mouse[0] <= 80 and 250 <= mouse[1] <= 310 : 
                                                    pygame.draw.rect(self.main_surface,couleur_bouton1,[10,250,70,60]) 
                                                    self.ecrire("Dame", (22, 272), taille_ecriture=20)
                                                    pygame.display.flip()
                
                                                else: 
                                                    pygame.draw.rect(self.main_surface,couleur_bouton2,[10,250,70,60])
                                                    self.ecrire("Dame",(22, 272), taille_ecriture=20)
                                                    pygame.display.flip() 
                
                                                if 90 <= mouse[0] <= 160 and 250 <= mouse[1] <= 310 : 
                                                    pygame.draw.rect(self.main_surface,couleur_bouton1,[90,250,70,60]) 
                                                    self.ecrire("fou", (102, 272), taille_ecriture=20)
                
                                                else: 
                                                    pygame.draw.rect(self.main_surface,couleur_bouton2,[90,250,70,60])
                                                    self.ecrire("fou", (102, 272), taille_ecriture=20)
                                                
                                                if 170 <= mouse[0] <= 240 and 250 <= mouse[1] <= 310 : 
                                                    pygame.draw.rect(self.main_surface,couleur_bouton1,[170,250,70,60]) 
                                                    self.ecrire("tour", (182, 272), taille_ecriture=20)
                                                    pygame.display.flip()
                
                                                else: 
                                                    pygame.draw.rect(self.main_surface,couleur_bouton2,[170,250,70,60])
                                                    self.ecrire("tour",(182, 272), taille_ecriture=20)
                                                    pygame.display.flip() 
                
                                                if 250 <= mouse[0] <= 320 and 250 <= mouse[1] <= 310 : 
                                                    pygame.draw.rect(self.main_surface,couleur_bouton1,[250,250,100,60]) 
                                                    self.ecrire("cavalier", (262, 272), taille_ecriture=20)
                
                                                else: 
                                                    pygame.draw.rect(self.main_surface,couleur_bouton2,[250,250,100,60])
                                                    self.ecrire("cavalier", (262, 272), taille_ecriture=20)

                                                for event in pygame.event.get():
                                                    if event.type == pygame.QUIT:
                                                        en_attente_de_decision = False
                                                        running2=False
                                                        #Permet de garder la fenêtre ouverte jusqu'à ce que l'utilisateur veuille la fermer
                                                        #Par défaut l'evennement QUIT correspond à cliquer sur la croix
                    
                                                    if event.type == pygame.MOUSEBUTTONDOWN:
                                                        # Set the x, y postions of the mouse click 
                                                        mouse=pygame.mouse.get_pos()

                                                        if 10 <= mouse[0] <= 80 and 250 <= mouse[1] <= 310: #le joueur choisit une dame
                                                            dictionnaire_pieces.Echiquier[position_arrivee]=pieces.dame('blanc', position_arrivee[0],position_arrivee[1], 'dameB')
                                                            en_attente_de_decision=False

                                                        if 90 <= mouse[0] <= 160 and 250 <= mouse[1] <= 310: #le joueur choisit un fou
                                                            dictionnaire_pieces.Echiquier[position_arrivee]=pieces.fou('blanc', position_arrivee[0],position_arrivee[1], 'fouB')
                                                            en_attente_de_decision=False


                                                        if 170 <= mouse[0] <= 240 and 250 <= mouse[1] <= 310: #le joueur choisit une tour 
                                                            dictionnaire_pieces.Echiquier[position_arrivee]=pieces.tour('blanc', position_arrivee[0],position_arrivee[1], 'tourB')
                                                            en_attente_de_decision=False


                                                        if 250 <= mouse[0] <= 320 and 250 <= mouse[1] <= 310: #le joueur choisit un cavalier
                                                            dictionnaire_pieces.Echiquier[position_arrivee]=pieces.cavalier('blanc', position_arrivee[0],position_arrivee[1], 'cavalierB')
                                                            en_attente_de_decision=False
                                                        
                                                



                                        else:
                                            if position_arrivee[1]==0:
                                                self.ecrire("Votre pion se transforme en ?", (340+self.largeur_echiquier +10, 130))
                                                couleur_bouton1 = (100,100,100) 
                                                couleur_bouton2 = (210,200,80)
                                                
                                                en_attente_de_decision=True

                                                while en_attente_de_decision:

                                                    mouse = pygame.mouse.get_pos() 

                                                    #différentes options de promotion
                                                    if 340+self.largeur_echiquier + 10 <= mouse[0] <= 340+self.largeur_echiquier + 80 and 250 <= mouse[1] <= 310 : 
                                                        pygame.draw.rect(self.main_surface,couleur_bouton1,[340+self.largeur_echiquier +10,250,70,60]) 
                                                        self.ecrire("Dame", (340+self.largeur_echiquier + 22, 272), taille_ecriture=20)
                                                        pygame.display.flip()
                
                                                    else: 
                                                        pygame.draw.rect(self.main_surface,couleur_bouton2,[340+self.largeur_echiquier +10,250,70,60])
                                                        self.ecrire("Dame",(340+self.largeur_echiquier +22, 272), taille_ecriture=20)
                                                        pygame.display.flip() 
                    
                                                    if 340+self.largeur_echiquier +90 <= mouse[0] <= 340+self.largeur_echiquier +160 and 250 <= mouse[1] <= 310 : 
                                                        pygame.draw.rect(self.main_surface,couleur_bouton1,[340+self.largeur_echiquier +90,250,70,60]) 
                                                        self.ecrire("fou", (340+self.largeur_echiquier +102, 272), taille_ecriture=20)
                
                                                    else: 
                                                        pygame.draw.rect(self.main_surface,couleur_bouton2,[340+self.largeur_echiquier +90,250,70,60])
                                                        self.ecrire("fou", (340+self.largeur_echiquier +102, 272), taille_ecriture=20)
                                                    
                                                    if 340+self.largeur_echiquier +170 <= mouse[0] <= 340+self.largeur_echiquier +240 and 250 <= mouse[1] <= 310 : 
                                                        pygame.draw.rect(self.main_surface,couleur_bouton1,[340+self.largeur_echiquier +170,250,70,60]) 
                                                        self.ecrire("tour", (340+self.largeur_echiquier +182, 272), taille_ecriture=20)
                                                        pygame.display.flip()
                
                                                    else: 
                                                        pygame.draw.rect(self.main_surface,couleur_bouton2,[340+self.largeur_echiquier +170,250,70,60])
                                                        self.ecrire("tour",(340+self.largeur_echiquier +182, 272), taille_ecriture=20)
                                                        pygame.display.flip() 
                    
                                                    if 340+self.largeur_echiquier +250 <= mouse[0] <= 340+self.largeur_echiquier +310 and 250 <= mouse[1] <= 310 : 
                                                        pygame.draw.rect(self.main_surface,couleur_bouton1,[340+self.largeur_echiquier +250,250,90,60]) 
                                                        self.ecrire("cavalier", (340+self.largeur_echiquier +262, 272), taille_ecriture=20)
                
                                                    else: 
                                                        pygame.draw.rect(self.main_surface,couleur_bouton2,[340+self.largeur_echiquier +250,250,90,60])
                                                        self.ecrire("cavalier", (340+self.largeur_echiquier +262, 272), taille_ecriture=20)

                                                    for event in pygame.event.get():

                                                        if event.type == pygame.QUIT:
                                                            en_attente_de_decision = False
                                                            running2=False
                                                            #l'utilisateur peut encore fermer la fenêtre sans problème
                        
                                                        if event.type == pygame.MOUSEBUTTONDOWN:
                                                            # Set the x, y postions of the mouse click 
                                                            mouse=pygame.mouse.get_pos()

                                                            if 340+self.largeur_echiquier +10 <= mouse[0] <= 340+self.largeur_echiquier +80 and 250 <= mouse[1] <= 310: #le joueur choisit une dame
                                                                dictionnaire_pieces.Echiquier[position_arrivee]=pieces.dame('noir', position_arrivee[0],position_arrivee[1], 'dameN')
                                                                en_attente_de_decision=False

                                                            if 340+self.largeur_echiquier +90 <= mouse[0] <= 340+self.largeur_echiquier +160 and 250 <= mouse[1] <= 310: #le joueur choisit un fou
                                                                dictionnaire_pieces.Echiquier[position_arrivee]=pieces.fou('noir', position_arrivee[0],position_arrivee[1], 'fouN')
                                                                en_attente_de_decision=False


                                                            if 340+self.largeur_echiquier +170 <= mouse[0] <= 340+self.largeur_echiquier +240 and 250 <= mouse[1] <= 310: #le joueur choisit une tour 
                                                                dictionnaire_pieces.Echiquier[position_arrivee]=pieces.tour('noir', position_arrivee[0],position_arrivee[1], 'tourN')
                                                                en_attente_de_decision=False


                                                            if 340+self.largeur_echiquier +250 <= mouse[0] <= 340+self.largeur_echiquier +310 and 250 <= mouse[1] <= 310: #le joueur choisit un cavalier
                                                                dictionnaire_pieces.Echiquier[position_arrivee]=pieces.cavalier('noir', position_arrivee[0],position_arrivee[1], 'cavalierN')
                                                                en_attente_de_decision=False

                                case=()
                                memoire=[]
                                self.setup_board()
                                self.setup_pieces()
                            
                            pygame.display.flip()

#déclarer forfait de l'un ou de l'autre des joueurs
                    elif 20 <= mouse[0] <= 120 and 450 <= mouse[1] <= 510:

                        self.ecrire("Les blancs ont déclaré forfait.", (910, 200))
                        pygame.time.delay(2000) #pause for a given number of milliseconds based on the CPU clock 

                        self.main_surface.fill((131, 166, 151))
                        self.ecrire("Les noirs ont gagné !", (460,250), taille_ecriture=35)
                        pygame.time.delay(2000)

                        fin_de_partie=True

                    
                    elif self.largeur_echiquier+360 <= mouse[0] <= self.largeur_echiquier+460 and 450 <= mouse[1] <= 510:

                        self.ecrire("Les noirs ont déclaré forfait.", (10, 200))
                        pygame.time.delay(2000)

                        self.main_surface.fill((131, 166, 151))
                        self.ecrire("Les blancs ont gagné !", (460,250), taille_ecriture=35)
                        pygame.time.delay(2000) 
                        fin_de_partie=True
                                                  
                    pygame.display.flip() 

#proposer la nulle en cliquant sur l'un des boutons proposer la nulle
                    if 140 <= mouse[0] <= 260 and 450 <= mouse[1] <= 510 : #ie les blancs demandent match nul
                        self.ecrire("Les blancs proposent la nulle.", (910, 300))
                        self.ecrire("Acceptes-tu?", (910, 330))
                        pause=True

                        while pause :
                            mouse=pygame.mouse.get_pos()

                            if self.largeur_echiquier+360 <= mouse[0] <= self.largeur_echiquier+460 and 450 <= mouse[1] <= 510 : #bouton change de couleur quand la souris passe dessus
                                pygame.draw.rect(self.main_surface,couleur_bouton1,[self.largeur_echiquier+360,450,100,60]) 
                                self.ecrire("Oui", (self.largeur_echiquier+371, 472), taille_ecriture=20)
          
                            else: 
                                pygame.draw.rect(self.main_surface,couleur_bouton2,[self.largeur_echiquier+360,450,100,60])
                                self.ecrire("Oui", (self.largeur_echiquier+371, 472), taille_ecriture=20)
    
                            if self.largeur_echiquier+480 <= mouse[0] <= self.largeur_echiquier+600 and 450 <= mouse[1] <= 510 : 
                                pygame.draw.rect(self.main_surface,couleur_bouton1,[self.largeur_echiquier+480,450,120,60]) 
                                self.ecrire("Non", (self.largeur_echiquier+490, 472), taille_ecriture=20)
    
                            else: 
                                pygame.draw.rect(self.main_surface,couleur_bouton2,[self.largeur_echiquier+480,450,120,60])
                                self.ecrire("Non", (self.largeur_echiquier+490, 472), taille_ecriture=20)

                            
                            for event in pygame.event.get():
                                if event.type == pygame.QUIT:
                                    pause = False
                                    running2=False
                                    #permet à l'utilisateur de fermer la fenêtre à tout moment
                
                                if event.type == pygame.MOUSEBUTTONDOWN:
                                    # Set the x, y postions of the mouse click 
                                    x, y = mouse

                                    if self.largeur_echiquier+360 <= x <= self.largeur_echiquier+460 and 450 <= y <= 510 :
                                        pause=False
                                        self.main_surface.fill((131, 166, 151))
                                        self.ecrire("Partie nulle", (510,250), taille_ecriture=50)
                                        pygame.time.delay(2000) 
                                        fin_de_partie=True
                                    
                                    elif self.largeur_echiquier+480 <= x <= self.largeur_echiquier+600 and 450 <= y <= 510 :
                                        pause=False
                                        self.setup_board() 
                                        self.setup_pieces() 
                        continue       
                    
                    if self.largeur_echiquier+480 <= mouse[0] <= self.largeur_echiquier+600 and 450 <= mouse[1] <= 510 : #ie les noirs demandent match nul
                        
                        self.ecrire("Les noirs proposent la nulle.", (10, 300))
                        self.ecrire("Acceptes-tu?", (10, 330))
                        pause1=True

                        while pause1 :
                            mouse = pygame.mouse.get_pos() 

                            if 20 <= mouse[0] <= 120 and 450 <= mouse[1] <= 510 : #bouton change de couleur quand la souris passe dessus
                                pygame.draw.rect(self.main_surface,couleur_bouton1,[20,450,100,60]) 
                                self.ecrire("Oui", (31, 472), taille_ecriture=20)
          
                            else: 
                                pygame.draw.rect(self.main_surface,couleur_bouton2,[20,450,100,60])
                                self.ecrire("Oui", (31, 472), taille_ecriture=20)
    
                            if 140 <= mouse[0] <= 260 and 450 <= mouse[1] <= 510 : 
                                pygame.draw.rect(self.main_surface,couleur_bouton1,[140,450,120,60]) 
                                self.ecrire("Non", (150, 472), taille_ecriture=20)
    
                            else: 
                                pygame.draw.rect(self.main_surface,couleur_bouton2,[140,450,120,60])
                                self.ecrire("Non", (150, 472), taille_ecriture=20)

                            
                            for event in pygame.event.get():
                                if event.type == pygame.QUIT:
                                    pause1 = False
                                    running2=False
                                    #permet à l'utilisateur de fermer la fenêtre à tout moment
                
                                if event.type == pygame.MOUSEBUTTONDOWN:
                                    # Set the x, y postions of the mouse click 
                                    x, y = mouse

                                    if 20 <= x <= 120 and 450 <= y <= 510 :
                                        pause1=False
                                        self.main_surface.fill((131, 166, 151))
                                        self.ecrire("Partie nulle", (510,250), taille_ecriture=50)
                                        pygame.time.delay(2000) 
                                        fin_de_partie=True
                                    
                                    elif 140 <= x <= 260 and 450 <= y <= 510:
                                        pause1=False
                                        self.setup_board() 
                                        self.setup_pieces()                                      
                

#la partie qui suit code la fin de partie, laissant aux joueurs le choix de rejouer ou de quitter                
                if fin_de_partie==True:

                    running3=True
                    self.main_surface.fill((131, 166, 151))

                    while running3:
                        self.ecrire("Voulez-vous rejouer ?", (430,150), taille_ecriture=60)
                        couleur_bouton1 = (100,100,100) 
                        couleur_bouton2 = (210,200,80)
                        mouse = pygame.mouse.get_pos() 

                        if 300 <= mouse[0] <= 500 and 350 <= mouse[1] <= 410 : 
                            pygame.draw.rect(self.main_surface,couleur_bouton1,[300,350,200,60]) 
                            self.ecrire("Pour sûr", (310, 360), taille_ecriture=40)
                            pygame.display.flip()
                    
                        else: 
                            pygame.draw.rect(self.main_surface,couleur_bouton2,[300,350,200,60])
                            self.ecrire("Pour sûr",(310, 360), taille_ecriture=40)
                            pygame.display.flip() 
                        
                        if 700 <= mouse[0] <= 900 and 350 <= mouse[1] <= 410 : 
                            pygame.draw.rect(self.main_surface,couleur_bouton1,[700,350,200,60]) 
                            self.ecrire("Une autre fois", (710, 360 ), taille_ecriture=40)
                    
                        else: 
                            pygame.draw.rect(self.main_surface,couleur_bouton2,[700,350,200,60])
                            self.ecrire("Une autre fois", (710, 360 ), taille_ecriture=40)
                        
                        for event in pygame.event.get():
                            if event.type == pygame.QUIT:
                                running2=False
                                running3 = False
                                #Permet de garder la fenêtre ouverte jusqu'à ce que l'utilisateur veuille la fermer
                                #Par défaut l'evennement QUIT correspond à cliquer sur la croix
                    
                            if event.type == pygame.MOUSEBUTTONDOWN:
                            # Set the x, y postions of the mouse click 
                                x, y = mouse
                                if 300 <= x <= 500 and 350 <= y <= 410 : 
                                    running3=False
                                    #on réinitialise le dictionnaire
                                    dictionnaire_pieces.Echiquier={(0,0) : dictionnaire_pieces.tourB1, (7,0) : dictionnaire_pieces.tourB2, (1,0) : dictionnaire_pieces.cavalierB1, (6,0) : dictionnaire_pieces.cavalierB2, (2,0) : dictionnaire_pieces.fouB1, (5,0) : dictionnaire_pieces.fouB2, (3,0) : dictionnaire_pieces.dameB, (4,0) : dictionnaire_pieces.roiB, (0,1) : dictionnaire_pieces.pionB1, (1,1): dictionnaire_pieces.pionB2, (2,1) : dictionnaire_pieces.pionB3, (3,1) : dictionnaire_pieces.pionB4, (4,1) : dictionnaire_pieces.pionB5, (5,1): dictionnaire_pieces.pionB6, (6,1): dictionnaire_pieces.pionB7, (7,1) : dictionnaire_pieces.pionB8, (0,7) : dictionnaire_pieces.tourN1, (7,7) : dictionnaire_pieces.tourN2, (1,7) : dictionnaire_pieces.cavalierN1, (6,7) : dictionnaire_pieces.cavalierN2, (2,7) : dictionnaire_pieces.fouN1, (5,7) : dictionnaire_pieces.fouN2, (3,7) : dictionnaire_pieces.dameN, (4,7) : dictionnaire_pieces.roiN, (0,6) : dictionnaire_pieces.pionN1, (1,6): dictionnaire_pieces.pionN2, (2,6) : dictionnaire_pieces.pionN3, (3,6) : dictionnaire_pieces.pionN4, (4,6) : dictionnaire_pieces.pionN5, (5,6): dictionnaire_pieces.pionN6, (6,6): dictionnaire_pieces.pionN7, (7,6) : dictionnaire_pieces.pionN8}

                                    #on change les coordonnées dans les propriétés des objets
                                    dictionnaire_pieces.tourB1.x , dictionnaire_pieces.tourB1.y = 0, 0
                                    dictionnaire_pieces.tourB2.x , dictionnaire_pieces.tourB2.y = 7, 0
                                    dictionnaire_pieces.cavalierB1.x , dictionnaire_pieces.cavalierB1.y = 1 , 0
                                    dictionnaire_pieces.cavalierB2.x , dictionnaire_pieces.cavalierB2.y = 6 , 0
                                    dictionnaire_pieces.fouB1.x , dictionnaire_pieces.fouB1.y = 2 , 0
                                    dictionnaire_pieces.fouB2.x , dictionnaire_pieces.fouB2.y = 5 , 0
                                    dictionnaire_pieces.dameB.x , dictionnaire_pieces.dameB.y = 3 , 0
                                    dictionnaire_pieces.roiB.x , dictionnaire_pieces.roiB.y = 4 , 0
                                    dictionnaire_pieces.pionB1.x , dictionnaire_pieces.pionB1.y = 0 , 1
                                    dictionnaire_pieces.pionB2.x , dictionnaire_pieces.pionB2.y = 1 , 1
                                    dictionnaire_pieces.pionB3.x , dictionnaire_pieces.pionB3.y = 2 , 1
                                    dictionnaire_pieces.pionB4.x , dictionnaire_pieces.pionB4.y = 3 , 1
                                    dictionnaire_pieces.pionB5.x , dictionnaire_pieces.pionB5.y = 4 , 1
                                    dictionnaire_pieces.pionB6.x , dictionnaire_pieces.pionB6.y = 5 , 1
                                    dictionnaire_pieces.pionB7.x , dictionnaire_pieces.pionB7.y = 6 , 1
                                    dictionnaire_pieces.pionB8.x , dictionnaire_pieces.pionB8.y = 7 , 1

                                    dictionnaire_pieces.tourN1.x , dictionnaire_pieces.tourN1.y = 0, 7
                                    dictionnaire_pieces.tourN2.x , dictionnaire_pieces.tourN2.y = 7, 7
                                    dictionnaire_pieces.cavalierN1.x , dictionnaire_pieces.cavalierN1.y = 1 , 7
                                    dictionnaire_pieces.cavalierN2.x , dictionnaire_pieces.cavalierN2.y = 6 , 7
                                    dictionnaire_pieces.fouN1.x , dictionnaire_pieces.fouN1.y = 2 , 7
                                    dictionnaire_pieces.fouN2.x , dictionnaire_pieces.fouN2.y = 5 , 7
                                    dictionnaire_pieces.dameN.x , dictionnaire_pieces.dameN.y = 3 , 7
                                    dictionnaire_pieces.roiN.x , dictionnaire_pieces.roiN.y = 4 , 7
                                    dictionnaire_pieces.pionN1.x , dictionnaire_pieces.pionN1.y = 0 , 6
                                    dictionnaire_pieces.pionN2.x , dictionnaire_pieces.pionN2.y = 1 , 6
                                    dictionnaire_pieces.pionN3.x , dictionnaire_pieces.pionN3.y = 2 , 6
                                    dictionnaire_pieces.pionN4.x , dictionnaire_pieces.pionN4.y = 3 , 6
                                    dictionnaire_pieces.pionN5.x , dictionnaire_pieces.pionN5.y = 4 , 6
                                    dictionnaire_pieces.pionN6.x , dictionnaire_pieces.pionN6.y = 5 , 6
                                    dictionnaire_pieces.pionN7.x , dictionnaire_pieces.pionN7.y = 6 , 6
                                    dictionnaire_pieces.pionN8.x , dictionnaire_pieces.pionN8.y = 7 , 6

                                    self.__init__()

                                if 700 <= x <= 900 and 350 <= y <= 410 : 
                                    running2=False
                                    running3 = False

        clock.tick(150)
        #détermine le nombre de fois que cette boucle est exécutée par seconde
        pygame.quit()
        


b=general()
